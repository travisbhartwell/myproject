#+title: MyProject Planning

* Project Task Runner
** TODO =project.find_files_for_filset= should be additive
** TODO =project.find_files_for_filset= should support symlinks and files with spaces in them
** TODO Add automated tests of =list-tasks= and other output-producing actions

* Milestones
** Features to Design and Explore
*** DONE Out of band =myproject= directories and configuration
*** TODO Data structures/split between Task Definitions and Task Execution
*** TODO Intra- and Inter- project code re-use
*** TODO Declaring task dependencies on one another

** Dog Fooding
*** TODO Remove =myproject-tasks= file
*** TODO Remove =mycmd/project= from MyCmd
*** TODO Rename MyProject's =mycmd/myproject= to =mycmd/project=
*** TODO Convert all personal =myproject= files to =myproject= directories
*** TODO Create snapshot
*** TODO Evaluate all code and add appropriate guards and error handling

** 0.1
*** TODO End User Documentation
*** TODO Installation Documentation
*** TODO CI using GHA
*** TODO Emacs support for executing tasks outside of my own dotfiles
*** TODO Announcement development log post
*** TODO Announcement YouTube video

** Post-0.1
*** TODO Command-line completion for tasks for =mycmd project run=

* Work Log Posts
** DONE Weekly Progress Report with weekly demo
SCHEDULED: <2025-01-03 Fri>
** DONE Weekly Progress Report with weekly demo
SCHEDULED: <2025-01-17 Fri>
** DONE Weekly Progress Report with weekly demo
SCHEDULED: <2025-01-24 Fri>
** DONE Weekly Progress Report with weekly demo
SCHEDULED: <2025-06-06 Fri>
** DONE Weekly Progress Report with weekly demo
SCHEDULED: <2025-06-13 Fri>
** TODO Introduction to MyProject
** TODO Weekly Progress Report with weekly demo
SCHEDULED: <2025-06-20 Fri>

* Next Steps
** DONE Add more details to [[file:~/Developer/Personal/myproject/main/README.md][README]]
** DONE Freewrite about design of out of band =myproject= directories and configuration
** Task Registry
The following steps in the implementation should be done:
*** DONE Initial Implementation to Support =mycmd myproject list-tasks=
**** Only fields are the name fields and the function name, no arguments or filesets
**** Only loads =myproject/main=, with a simple =myproject.register_task= available.
*** DONE Initial Implementation of =mycmd myproject run=
**** Simplest version of =run=: no arguments to tasks, only executing a single task
*** DONE Argument Support
**** Both in the task definition and in =run= in execution
*** DONE Multiple task definition file support
*** Fileset definition and support
**** Implement =myproject.register_fileset= and related methods

* Next Demo
** DONE Minimal =mycmd myproject list-tasks= that prints project root and MyProject task definition root
SCHEDULED: <2025-01-03 Fri>
*** DONE Implement and test the basic =project.find_up= which simply looks for =myproject/main=
*** DONE Implement and test the =_MYPROJECT_MAPPINGS= associative array, test and use that in =project.find_up=
*** DONE Implement and test parsing the =MYPROJECT_MAPPING= environment variable in =project.find_up=
*** DONE Implement function to check if it is a valid Task Definition directory and use it in =project.find_up= and =project._find_up=
*** DONE Implement separate =project._load_mapping_configuration= function and call it from =project.find_up=
*** DONE Implement tests for =project._is_valid_task_definition_directory=
*** DONE Test that =MYPROJECT_MAPPING= is ignored for invalid directories
*** DONE Implement and test parsing the MyProject Mapping Configuration File using the =MYPROJECT_MAPPING_CONFIG= environment variable
*** DONE Add trace logs for =_MYPROJECT_MAPPINGS=
*** DONE Test that the config file can handle using =~= for home
*** DONE Test the priority of =MYPROJECT_MAPPING= over =MYPROJECT_MAPPING_CONFIG=
*** DONE Implement minimal =mycmd myproject list-tasks= that calls =project.find_up=
*** DONE Implement and test parsing the MyProject Mapping Configuration File from the standard location

** DONE Working =mycmd myproject list-tasks= that will load tasks from a =myproject/main=
SCHEDULED: <2025-01-17 Fri>
*** DONE Document existing concepts and conventions to the [[file:myproject-concepts-and-conventions.org][Concepts and Conventions Document]]
*** DONE Clean up and re-organize =project-lib-test=
*** DONE Freewrite about task registry design
*** DONE Write design of task registry
*** DONE Create =myproject-tasks-lib= with name and function fields
*** DONE Create =myproject.register_task= accepting one arguments
*** DONE Create a minimal =myproject/main= in test data
*** DONE Write minimal test for =myproject.register_task= and task object methods
*** DONE Create =myproject.register_task= accepting one or two arguments

** DONE Working =mycmd myproject run= that will execute no-argument tasks from a =myproject/main=
SCHEDULED: <2025-01-24 Fri>

** DONE Working =mycmd project run= that will execute no-argument tasks from a task definition file other than =myproject/main=
SCHEDULED: <2025-06-06 Fri>
*** DONE Modify =mycmd.main= in =run= to convert =sub task1= into =sub/task1=
*** DONE Set global variables for the project directory and task definition directory
*** DONE Reset these global variables in =project:task_registry._reset_registry=
*** DONE Modify =project:task_registry.get_task= to attempt to load =sub= if it is not loaded

** DONE Clean up =mycmd myproject list-tasks= output
SCHEDULED: <2025-06-13 Fri>
*** DONE Update =project:task_registry.list_tasks= to use the namespaced task name
*** DONE Update =project:task_registry.list_tasks= to display tasks from =main= first
*** DONE Update =project:task_registry.list_tasks= to sort task names within each section
*** DONE Ensure that things are handled properly when there are only tasks in =main=


** TODO Working =mycmd myproject run= with arguments for a single task
SCHEDULED: <2025-06-20 Fri>

This task will first focus on arguments coming from =mycmd myproject run=, and then arguments defined with =myproject.register_task=.

*** TODO Modify =project.execute_task= to validate a project task definition has been loaded
*** TODO Write in the [[file:myproject-design.org][MyProject Design Document]] and the [[file:myproject-concepts-and-conventions.org][Concepts and Conventions Document]] about changes to the registry and tasks to support arguments
*** DONE Update =run= to parse the command line to get task arguments
*** DONE Add tasks in test data that take arguments

** TODO Update Testing Infrastructure and Tests
SCHEDULED: <2025-06-20 Fri>
*** DONE Create test output directory for all output from one test run
*** DONE Pass =_TEST_TRACE_FILE= environment variable to test scripts
*** DONE Create =testing-support-lib= with common variable and setup and tear-down routines
*** DONE Recreate existing test suite, split up by functionality
*** DONE Capture shell trace logs to =_TEST_TRACE_FILE=
*** DONE Implement function to aggregate coverage files
*** DONE Implement function to render code with coverage
*** DONE Improve coverage output
*** TODO Output test reports to a reports directory
*** TODO Add junit XML production for tests

* Strategies and Goals

My development process should follow the following tenants:

** When I need to figure out something, use Free Writing to figure out the simplest possible thing that could work.
** Document each design decision (even tenuous ones) in the [[file:myproject-design.org][MyProject Design Document]].
** When previous decisions end up not working, repeat the process and update the design document.
** When implementing a design, start by breaking down the next steps in small increments in this planning document.
** Implement those design decisions in as small of increments as I can, using automated testing to give feedback, especially when the increment isn't enough to execute meaningfully.
** These small increments can be as small as "create a  placeholder function"; anything to promote momentum.
** Use [[https://mitchellh.com/writing/building-large-technical-projects][demo-driven development]]; iterate quickly towards being able to show the code working.
** Once a feature is complete:
*** Take a pass to add details to the [[file:myproject-concepts-and-conventions.org][Concepts and Conventions Document]] and update the implementation and testing code to fit.
*** If it is a user-facing feature, add appropriate documentation to the End User Documentation.


* Ideas
** I should integrate this with Projectile

[[https://docs.projectile.mx/projectile/projects.html#adding-custom-project-types][Custom Project Types]]

** Possibly Use a =command_not_found= handler to execute tasks

Similar to what [[https://github.com/aleyan/dela][dela]] does.

* Features Needed for Dog Fooding
** TODO Output verbosity functions, =myproject.output_only_if_not_quiet=
** TODO =myproject.execute_tasks=
** TODO =myproject.register_default_task=
