#!/usr/bin/env -S mycmd project run
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

set -o nounset -o errexit -o errtrace -o pipefail

project.load_task_library "shell"
project.load_task_library "git"

# shellcheck disable=SC2154
readonly MYPROJECT_LIB_BASE_DIR="${MYPROJECT_BASE_DIR}/mycmd"
readonly DOCS_DIR="${MYPROJECT_BASE_DIR}/docs"
readonly SUPPORT_DIR="${MYPROJECT_BASE_DIR}/support"
readonly TESTING_BASE="${MYPROJECT_BASE_DIR}/testing"
readonly TEST_FILES_BASE="${TESTING_BASE}/tests"
readonly TEST_VENDOR_DIR="${TESTING_BASE}/vendor"
readonly VENDOR_WORKING_DIR="${TEST_VENDOR_DIR}/.working"
readonly TMP_WORKING_DIR="${MYPROJECT_BASE_DIR}/tmp"

if [[ ! -d "${TMP_WORKING_DIR}" ]]; then
    mkdir -p "${TMP_WORKING_DIR}" || true
fi

WORKTREES_PARENT_DIR="$(cd "$(dirname "${MYPROJECT_BASE_DIR}")" &>/dev/null && pwd -P)"
readonly WORKTREES_PARENT_DIR

mycmd.trace "Set the following variables:"
mycmd.trace "- MYPROJECT_LIB_BASE_DIR: ${MYPROJECT_LIB_BASE_DIR}"
mycmd.trace "- DOCS_DIR:               ${DOCS_DIR}"
mycmd.trace "- SUPPORT_DIR:            ${SUPPORT_DIR}"
mycmd.trace "- TESTING_BASE:           ${TESTING_BASE}"
mycmd.trace "- TEST_FILES_BASE:        ${TEST_FILES_BASE}"
mycmd.trace "- TEST_VENDOR_DIR:        ${TEST_VENDOR_DIR}"
mycmd.trace "- VENDOR_WORKING_DIR:     ${VENDOR_WORKING_DIR}"
mycmd.trace "- TMP_WORKING_DIR:        ${TMP_WORKING_DIR}"
mycmd.trace "- WORKTREES_PARENT_DIR:   ${WORKTREES_PARENT_DIR}"

#----------------------------------------
# Project File Sets
# All Files
project.register_fileset ALL_FILES
project.find_files_for_fileset ALL_FILES "${MYPROJECT_LIB_BASE_DIR}" "${TEST_FILES_BASE}" "${SUPPORT_DIR}" -type f
# shellcheck disable=SC2154
project.add_files_to_fileset ALL_FILES "${MYPROJECT_PROJECT_FILE}"
project.register_task_with_fileset list-all-files \
    project.list-files \
    ALL_FILES

# Implementation Files Only
project.register_fileset IMPLEMENTATION_FILES
project.find_files_for_fileset IMPLEMENTATION_FILES "${MYPROJECT_LIB_BASE_DIR}" -type f
project.register_task_with_fileset list-implementation-files \
    project.list-files \
    IMPLEMENTATION_FILES

# Test Files Only
project.register_fileset TEST_FILES
project.find_files_for_fileset TEST_FILES "${TEST_FILES_BASE}" -type f -name '*-test'
project.register_task_with_fileset list-test-files \
    project.list-files \
    TEST_FILES

#----------------------------------------
# Vendored Code Management
function _update_vendored_file_for_vendor_base_dir() {
    local -r source_path="${VENDOR_WORKING_DIR}/${1}"
    local -r vendor_dir="${2}"
    local -r dest_path="${vendor_dir}/${3}"
    local -r dest_dir=$(dirname "${dest_path}")

    if [[ ! -e "${source_path}" ]]; then
        mycmd.log "Source file '${source_path}' not found."
        return 1
    fi

    if [[ ! -e "${dest_dir}" ]]; then
        mkdir -p "${dest_dir}"
    fi

    if [[ -e "${dest_path}" ]]; then
        if diff -q "${source_path}" "${dest_path}"; then
            mycmd.log "Vendored file '${dest_path}' is up to date."
            return 0
        fi
    fi

    mycmd.log "Updating vendor destination '${dest_path}'."
    cp -a "${source_path}" "${dest_path}"
}

function _update_vendored_test_file() {
    _update_vendored_file_for_vendor_base_dir "${1}" "${TEST_VENDOR_DIR}" "${2}"
}

function update-shunit2() {
    # https://github.com/kward/shunit2/tree/master
    if [[ ! -e "${VENDOR_WORKING_DIR}/shunit2" ]]; then
        mkdir -p "${VENDOR_WORKING_DIR}" 2>/dev/null || true
        cd "${VENDOR_WORKING_DIR}"
        mycmd.output "Cloning shunit2 git repository."
        git clone --quiet git@github.com:kward/shunit2.git shunit2
    fi

    cd "${VENDOR_WORKING_DIR}/shunit2"
    mycmd.output "Pulling latest shunit2 changes from git."
    git pull --rebase --quiet

    _update_vendored_test_file "shunit2/shunit2" "shunit2"
    _update_vendored_test_file "shunit2/shunit2_test_helpers" "shunit2_test_helpers"
}
project.register_task update-shunit2

#----------------------------------------
# Code Metrics
function count_source_lines() {
    local -n fileset="${1}"

    project.output_only_if_not_quiet "Counting source lines in fileset '${!fileset}'."
    wc -l "${fileset[@]}" | sort -nr
}
project.register_task_with_fileset count-all-source-lines \
    count_source_lines \
    ALL_FILES
project.register_task_with_fileset count-implementation-source-lines \
    count_source_lines \
    IMPLEMENTATION_FILES
project.register_task_with_fileset count-test-source-lines \
    count_source_lines \
    TEST_FILES

#----------------------------------------
# Test execution
# shellcheck disable=SC2034
function summarize_test_results() {
    local -n results_ref="${1}"

    local -A result_table=()
    local test_file
    local result

    for test_file in "${!results_ref[@]}"; do
        result="${results_ref["${test_file}"]}"

        if ((result == 0)); then
            # Green Check: https://www.compart.com/en/unicode/U+2705
            result_table["${test_file}"]="\u2705"
        else
            # Red X: https://www.compart.com/en/unicode/U+274C
            result_table["${test_file}"]="\u274c"
        fi
    done

    mycmd.print_table result_table \
        "Testing Summary:" \
        "Test File" "Result"
}

function get-test-log-file() {
    local description
    description="$(date '+%Y-%m-%d-%H%M%S')"
    readonly description

    local -r test_log_file="${TMP_WORKING_DIR}/test-output-${description}.log"

    echo "${test_log_file}"
}

function execute-test() {
    local -r test_log_file="${1}"
    shift
    local -r test_file="${1}"
    shift

    if [[ ! -e "${test_file}" ]]; then
        mycmd.log "Test file not found: ${test_file}"
        return 1
    fi

    local result=0
    mycmd.log "Executing test file: ${test_file}"
    echo "Executing test file: ${test_file}" >>"${test_log_file}"

    /usr/bin/env \
        MYCMD_TRACE=1 \
        MYCMD_DEBUG=1 \
        MYCMD_LOG_FILE="${test_log_file}" \
        MYCMD_SEARCH_PATH="${MYPROJECT_LIB_BASE_DIR}" \
        "${test_file}" "${@}" || result=$?

    mycmd.log "Result of ${test_file}: ${result}"
    echo "Result of ${test_file}: ${result}" >>"${test_log_file}"
    return "${result}"
}

function execute-single-file-tests() {
    local -r test_file="${1}"
    shift

    local test_log_file
    test_log_file="$(get-test-log-file)"
    readonly test_log_file

    if (($# > 0)); then
        # https://github.com/kward/shunit2?tab=readme-ov-file#-running-specific-tests-from-the-command-line
        # Prefix the arguments with --
        set -- "${test_log_file}" "${test_file}" -- "${@}"
    else
        set -- "${test_log_file}" "${test_file}"
    fi

    execute-test "${@}"
}
project.register_task execute-single-file-tests

function execute-all-tests() {
    local -n test_fileset="${1}"
    local test_file
    local -A results=()
    local result

    local test_log_file
    test_log_file="$(get-test-log-file)"
    readonly test_log_file

    local final_result=0

    for test_file in "${test_fileset[@]}"; do
        result=0

        execute-test "${test_log_file}" "${test_file}" || result=$?
        # shellcheck disable=SC2034
        results["${test_file}"]="${result}"

        if ((result != 0)); then
            final_result="${result}"
        fi
    done

    summarize_test_results results
    return "${final_result}"
}
project.register_task_with_fileset execute-all-tests \
    execute-all-tests \
    TEST_FILES

function get-last-test-log() {
    local -a test_log_files=("${TMP_WORKING_DIR}"/test-output-*.log)

    if ((${#test_log_files[@]} == 0)); then
        return 1
    fi

    local -a sorted_logs
    readarray -t sorted_logs < <(printf '%s\n' "${test_log_files[@]}" | sort -r || true)
    local -r last_test_log="${sorted_logs[0]}"
    echo "${last_test_log}"
}

function page-last-test-log() {
    local last_test_log
    if ! last_test_log="$(mycmd.nullglob_set_wrapper get-last-test-log)"; then
        mycmd.output "No test log files found."
        return 1
    fi
    readonly last_test_log

    less "${last_test_log}"
}
project.register_task page-last-test-log

function remove-test-logs() {
    rm -f "${TMP_WORKING_DIR}"/test-output-*.log 2>/dev/null || true
}
project.register_task remove-test-logs

#----------------------------------------
# Code formatting
project.register_task_with_fileset format \
    project:shell.format \
    ALL_FILES

#----------------------------------------
# Code Lint
project.register_task_with_fileset lint \
    project:shell.lint \
    ALL_FILES

#----------------------------------------
# Snapshot Management
function _get_tag_name_from_parts() {
    local -r tag_prefix="${1}"
    local -r sequence_number="${2}"

    local date_string
    if ! date_string="$(date '+%Y-%m-%d')"; then
        mycmd.log "Unexpected error getting the date string"
        return 1
    fi
    readonly date_string

    echo "${tag_prefix}-r${sequence_number}-${date_string}"
}

function _get_next_tag_name_from_previous() {
    local -r current_tag="${1}"
    local -r tag_prefix="${2}"

    local current_sequence="${current_tag##"${tag_prefix}"-r}"
    current_sequence="${current_sequence%%-*}"
    readonly current_sequence

    local -ir next_sequence=$((current_sequence + 1))
    _get_tag_name_from_parts "${tag_prefix}" "${next_sequence}"
}

# Local Snapshots
# - used for testing changes locally
# - tags are not pushed to github
# - tag names are of the form 'local-snapshot-r0-2024-01-27'
readonly LOCAL_SNAPSHOT_TAG_PREFIX="local-snapshot"

function get_next_local_snapshot_tag_name_from_previous() {
    _get_next_tag_name_from_previous "${1}" "${LOCAL_SNAPSHOT_TAG_PREFIX}"
}

function get_local_snapshot_tags() {
    local -r tags_array_ref_name="${1}"
    project:git.list_tags "${tags_array_ref_name}" "${LOCAL_SNAPSHOT_TAG_PREFIX}-*"
}

function list-local-snapshots() {
    local -a tags=()
    get_local_snapshot_tags tags

    if (("${#tags[@]}" == 0)); then
        mycmd.output "There are no local snapshots defined."
    fi

    local tag
    for tag in "${tags[@]}"; do
        mycmd.output "${tag}"
    done
}
project.register_task list-local-snapshots

function get_latest_local_snapshot_tag() {
    local -a existing_tags=()
    get_local_snapshot_tags existing_tags

    if (("${#existing_tags[@]}" == 0)); then
        return 1
    fi

    echo "${existing_tags[0]}"
}

function get_new_local_snapshot_tag_name() {
    local latest_local_snapshot_tag
    if ! latest_local_snapshot_tag="$(get_latest_local_snapshot_tag)"; then
        mycmd.trace "No local snapshot tags created"

        _get_tag_name_from_parts "${LOCAL_SNAPSHOT_TAG_PREFIX}" 0
        return 0
    fi
    readonly latest_local_snapshot_tag

    _get_next_tag_name_from_previous "${latest_local_snapshot_tag}" "${LOCAL_SNAPSHOT_TAG_PREFIX}"
}

function create_local_snapshot() {
    local commit
    if (($# == 0)); then
        commit="HEAD"
    else
        commit="${1}"
    fi
    readonly commit

    if project:git.commit_is_tagged_matching_pattern "${commit}" "${LOCAL_SNAPSHOT_TAG_PREFIX}-r.*"; then
        mycmd.log "Commit '${commit}' already has a snapshot defined."
        return 1
    fi

    local new_snapshot_tag_name
    if ! new_snapshot_tag_name="$(get_new_local_snapshot_tag_name)"; then
        mycmd.log "Error getting new snapshot tag name."
        return 1
    fi
    readonly new_snapshot_tag_name

    if ! project:git.create_lightweight_tag "${new_snapshot_tag_name}" "${commit}"; then
        mycmd.log "Error creating tag '${new_snapshot_tag_name}' at '${commit}'."
        return 1
    fi

    project.output_only_if_not_quiet "Created new local snapshot '${new_snapshot_tag_name}'."

    return 0
}
project.register_task create-local-snapshot \
    create_local_snapshot

# Development Snapshots
# - used for wider in-development testing
# - tags are pushed to github
# - tag names are of the form 'snapshot-r0-2024-01-27'
# - sequence numbers (r0 in this example) are independent of the local snapshot numbers
readonly DEVELOPMENT_SNAPSHOT_TAG_PREFIX='snapshot'

function get_next_development_snapshot_tag_name_from_previous() {
    _get_next_tag_name_from_previous "${1}" "${DEVELOPMENT_SNAPSHOT_TAG_PREFIX}"
}

function get_development_snapshot_tags() {
    local -r tags_array_ref_name="${1}"
    project:git.list_tags "${tags_array_ref_name}" "${DEVELOPMENT_SNAPSHOT_TAG_PREFIX}-*"
}

function list-development-snapshots() {
    local -a tags=()
    get_development_snapshot_tags tags

    if (("${#tags[@]}" == 0)); then
        mycmd.output "There are no development snapshots defined."
    fi

    local tag
    for tag in "${tags[@]}"; do
        mycmd.output "${tag}"
    done
}
project.register_task list-development-snapshots

function get_latest_development_snapshot_tag() {
    local -a existing_tags=()
    get_development_snapshot_tags existing_tags

    if (("${#existing_tags[@]}" == 0)); then
        return 1
    fi

    echo "${existing_tags[0]}"
}

function get_new_development_snapshot_tag_name() {
    local latest_development_snapshot_tag
    if ! latest_development_snapshot_tag="$(get_latest_development_snapshot_tag)"; then
        mycmd.trace "No development snapshot tags created"

        _get_tag_name_from_parts "${DEVELOPMENT_SNAPSHOT_TAG_PREFIX}" 0
        return 0
    fi
    readonly latest_development_snapshot_tag

    mycmd.output "Latest development tag: ${latest_development_snapshot_tag}"

    _get_next_tag_name_from_previous "${latest_development_snapshot_tag}" "${DEVELOPMENT_SNAPSHOT_TAG_PREFIX}"
}

function get_previous_snapshot_tag() {
    local current_tag="${1}"

    local -a all_tags=()
    if [[ "${current_tag}" = "${LOCAL_SNAPSHOT_TAG_PREFIX}"-* ]]; then
        get_local_snapshot_tags all_tags
    elif [[ "${current_tag}" = "${DEVELOPMENT_SNAPSHOT_TAG_PREFIX}"-* ]]; then
        get_development_snapshot_tags all_tags
    else
        mycmd.log "Unexpected tag format of current tag: '${current_tag}'."
    fi

    local -i index
    local -i tag_count="${#all_tags[@]}"
    local -i previous_tag_index

    for ((index = 0; index < tag_count; index++)); do
        if [[ "${current_tag}" = "${all_tags[${index}]}" ]]; then
            previous_tag_index=$((index + 1))

            if ((previous_tag_index == tag_count)); then
                mycmd.log "Current tag '${current_tag}' is the oldest tag"
                return 1
            fi

            echo "${all_tags[${previous_tag_index}]}"
            return 0
        fi
    done

    mycmd.log "Tag '${current_tag}' not found."
    return 1
}

mycmd.defer_at_startup mycmd.init_bin gum
function promote_local_snapshot_to_development() {
    if (($# == 0)); then
        mycmd.log "Missing snapshot to promote."
        return 1
    fi

    local -r local_snapshot_tag="${1}"

    local new_development_snapshot_tag
    if ! new_development_snapshot_tag="$(get_new_development_snapshot_tag_name)"; then
        mycmd.log "Unexpected error getting new development snapshot tag name."
        return 1
    fi
    readonly new_development_snapshot_tag

    local -a tag_messages=()
    local summary_line
    if ! summary_line="$(mycmd.bin_execute gum input --placeholder "Summary of Snapshot")"; then
        mycmd.log "Error getting summary line."
        return 1
    fi
    tag_messages+=("${summary_line}")
    tag_messages+=("Created from local snapshot tag '${local_snapshot_tag}'.")

    if ! project:git.create_annotated_tag "${local_snapshot_tag}" "${new_development_snapshot_tag}" tag_messages; then
        mycmd.log "Error creating annotated tag"
        return 1
    fi

    if ! project:git.push_changes_with_annotated_tags; then
        mycmd.log "Error pushing changes"
        return 1
    fi

    project.output_only_if_not_quiet "Created and pushed new development snapshot '${new_development_snapshot_tag}'."
}
project.register_task promote-local-snapshot-to-development \
    promote_local_snapshot_to_development

function promote_latest_local_snapshot_tag_to_development() {
    local latest_local_snapshot
    if ! latest_local_snapshot="$(get_latest_local_snapshot_tag)"; then
        mycmd.log "No local snapshot tags defined yet."
        return 1
    fi
    readonly latest_local_snapshot

    promote_local_snapshot_to_development "${latest_local_snapshot}"
}
project.register_task promote-latest-local-snapshot-to-development \
    promote_latest_local_snapshot_tag_to_development

# ----------------------------------------
# Worktree management
readonly SNAPSHOT_WORKTREE="${WORKTREES_PARENT_DIR}/snapshot"
readonly SNAPSHOT_WORKTREE_LAST_USED_TAG_FILE="${WORKTREES_PARENT_DIR}/.last-used-snapshot-tag"
readonly SNAPSHOT_WORKTREE_CURRENT_TAG_FILE="${WORKTREES_PARENT_DIR}/.current-snapshot-tag"

function get_snapshot_worktree_current_tag() {
    if [[ -e "${SNAPSHOT_WORKTREE_CURRENT_TAG_FILE}" ]]; then
        cat "${SNAPSHOT_WORKTREE_CURRENT_TAG_FILE}"
        return 0
    else
        return 1
    fi
}

function update_snapshot_worktree_current_tag_file() {
    local -r tag="${1}"

    echo "${tag}" >"${SNAPSHOT_WORKTREE_CURRENT_TAG_FILE}"
}

function get_snapshot_worktree_last_used_tag() {
    if [[ -e "${SNAPSHOT_WORKTREE_LAST_USED_TAG_FILE}" ]]; then
        cat "${SNAPSHOT_WORKTREE_LAST_USED_TAG_FILE}"
        return 0
    else
        return 1
    fi
}

function update_snapshot_worktree_last_used_tag_file() {
    local -r tag="${1}"

    echo "${tag}" >"${SNAPSHOT_WORKTREE_LAST_USED_TAG_FILE}"
}

function update_snapshot_worktree_to_snapshot() {
    local -r tag="${1}"
    local do_force
    if (($# > 1)); then
        do_force="${2}"
    fi
    readonly do_force

    if [[ -d "${SNAPSHOT_WORKTREE}" ]]; then
        local current_worktree_tag
        if ! current_worktree_tag="$(get_snapshot_worktree_current_tag)"; then
            mycmd.log "Unexpected error reading current snapshot worktree current tag file."
            return 1
        fi
        readonly current_worktree_tag

        if [[ "${current_worktree_tag}" = "${tag}" ]]; then
            if [[ "${do_force}" = "true" ]]; then
                mycmd.trace "Snapshot worktree is already at '${tag}'."
            else
                mycmd.output "Snapshot worktree is already at '${tag}'."
                return 0
            fi
        fi

        update_snapshot_worktree_last_used_tag_file "${current_worktree_tag}"
        project:git.update_worktree_to_commitish "${SNAPSHOT_WORKTREE}" "${tag}"
        update_snapshot_worktree_current_tag_file "${tag}"
    else
        project:git.add_worktree_at_detached_commit "${SNAPSHOT_WORKTREE}" "${tag}"
        update_snapshot_worktree_current_tag_file "${tag}"
    fi
}
project.register_task update-snapshot-worktree-to-snapshot \
    update_snapshot_worktree_to_snapshot

function rollback_snapshot_worktree_to_last_used_snapshot() {
    local last_used_tag
    if ! last_used_tag="$(get_snapshot_worktree_last_used_tag)"; then
        mycmd.log "No last used tag file found at '${SNAPSHOT_WORKTREE_LAST_USED_TAG_FILE}'."
        return 1
    fi
    readonly last_used_tag

    update_snapshot_worktree_to_snapshot "${last_used_tag}"
}
project.register_task rollback-snapshot-worktree-to-last-used-snapshot \
    rollback_snapshot_worktree_to_last_used_snapshot

function rollback_snapshot_worktree_to_previous_snapshot_in_sequence() {
    local current_worktree_tag
    if ! current_worktree_tag="$(get_snapshot_worktree_current_tag)"; then
        mycmd.log "Error reading current snapshot worktree current tag file."
        return 1
    fi
    readonly current_worktree_tag

    local prior_snapshot_tag
    if ! prior_snapshot_tag="$(get_previous_snapshot_tag "${current_worktree_tag}")"; then
        return 1
    fi
    readonly prior_snapshot_tag

    update_snapshot_worktree_to_snapshot "${prior_snapshot_tag}"
}
project.register_task rollback-snapshot-worktree-to-previous-snapshot-in-sequence \
    rollback_snapshot_worktree_to_previous_snapshot_in_sequence

function update_snapshot_worktree_to_latest_local_snapshot() {
    local latest_local_snapshot
    if ! latest_local_snapshot="$(get_latest_local_snapshot_tag)"; then
        mycmd.log "No local snapshot tags defined yet."
        return 1
    fi
    readonly latest_local_snapshot

    update_snapshot_worktree_to_snapshot "${latest_local_snapshot}" "${@}"
}
project.register_task update-snapshot-worktree-to-latest-local-snapshot \
    update_snapshot_worktree_to_latest_local_snapshot

function update_snapshot_worktree_to_latest_development_snapshot() {
    project:git.fetch_tags

    local latest_development_snapshot
    if ! latest_development_snapshot="$(get_latest_development_snapshot_tag)"; then
        mycmd.log "No development snapshot tags defined yet."
        return 1
    fi
    readonly latest_development_snapshot

    update_snapshot_worktree_to_snapshot "${latest_development_snapshot}" "${@}"
}
project.register_task update-snapshot-worktree-to-latest-development-snapshot \
    update_snapshot_worktree_to_latest_development_snapshot

#----------------------------------------
# Repo Stats
mycmd.init_bin git-quick-stats
function git-quick-stats() {
    # shellcheck disable=SC2154
    /usr/bin/env PATH="${HOMEBREW_PREFIX}/opt/coreutils/libexec/gnubin:${PATH}" \
        git quick-stats "${@}"
}
project.register_task git-quick-stats

#----------------------------------------
# Run everything
mycmd.defer_at_startup mycmd.init_bin find
function clean-up() {
    mycmd.bin_execute find "${MYPROJECT_BASE_DIR}" -type f -name '.DS_Store' -delete
}
project.register_task clean-up

function all() {
    project.execute_tasks clean-up format lint execute-all-tests
}
project.register_task all
project.register_default_task all
