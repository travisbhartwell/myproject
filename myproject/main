#!/usr/bin/env -S mycmd myproject run
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

set -o nounset -o errexit -o errtrace -o pipefail

# --------------------------------------------------------------------------------------------------
# Project-Wide Variables

mycmd.trace "The following variables set by MyProject are used in the main task definition file:"
# shellcheck disable=SC2154
mycmd.trace "- MYPROJECT_ROOT_DIRECTORY:            ${MYPROJECT_ROOT_DIRECTORY}"
# shellcheck disable=SC2154
mycmd.trace "- MYPROJECT_TASK_DEFINITION_DIRECTORY: ${MYPROJECT_TASK_DEFINITION_DIRECTORY}"

readonly MYPROJECT_LIB_BASE_DIR="${MYPROJECT_ROOT_DIRECTORY}/mycmd"
readonly DOCS_DIR="${MYPROJECT_ROOT_DIRECTORY}/docs"
readonly SUPPORT_DIR="${MYPROJECT_ROOT_DIRECTORY}/support"
readonly TEMPLATES_DIR="${SUPPORT_DIR}/templates"
readonly TESTING_BASE="${MYPROJECT_ROOT_DIRECTORY}/testing"
readonly TEST_FILES_BASE="${TESTING_BASE}/tests"
readonly TEST_SNAPSHOTS_DIR="${TESTING_BASE}/snapshots"
readonly TEST_VENDOR_DIR="${TESTING_BASE}/vendor"
readonly VENDOR_WORKING_DIR="${TEST_VENDOR_DIR}/.working"
readonly TMP_WORKING_DIR="${MYPROJECT_ROOT_DIRECTORY}/tmp"

if [[ ! -d "${TMP_WORKING_DIR}" ]]; then
    mkdir -p "${TMP_WORKING_DIR}" || true
fi

WORKTREES_PARENT_DIR="$(cd "$(dirname "${MYPROJECT_ROOT_DIRECTORY}")" &>/dev/null && pwd -P)"
readonly WORKTREES_PARENT_DIR

mycmd.trace "Set the following variables:"
mycmd.trace "- MYPROJECT_LIB_BASE_DIR: ${MYPROJECT_LIB_BASE_DIR}"
mycmd.trace "- DOCS_DIR:               ${DOCS_DIR}"
mycmd.trace "- SUPPORT_DIR:            ${SUPPORT_DIR}"
mycmd.trace "- TEMPLATES_DIR:          ${TEMPLATES_DIR}"
mycmd.trace "- TESTING_BASE:           ${TESTING_BASE}"
mycmd.trace "- TEST_FILES_BASE:        ${TEST_FILES_BASE}"
mycmd.trace "- TEST_SNAPSHOTS_DIR:     ${TEST_SNAPSHOTS_DIR}"
mycmd.trace "- TEST_VENDOR_DIR:        ${TEST_VENDOR_DIR}"
mycmd.trace "- VENDOR_WORKING_DIR:     ${VENDOR_WORKING_DIR}"
mycmd.trace "- TMP_WORKING_DIR:        ${TMP_WORKING_DIR}"
mycmd.trace "- WORKTREES_PARENT_DIR:   ${WORKTREES_PARENT_DIR}"

# --------------------------------------------------------------------------------------------------
# Project File Sets

# All Files
myproject.register_fileset ALL_FILES
myproject.find_and_add_files_to_fileset ALL_FILES "${MYPROJECT_LIB_BASE_DIR}" "${TEST_FILES_BASE}" "${SUPPORT_DIR}" "${MYPROJECT_TASK_DEFINITION_DIRECTORY}" -type f
myproject.find_and_add_files_to_fileset ALL_FILES "${TESTING_BASE}/test-data/valid" -regex '.*/myproject/[^/]*' -type f
myproject.add_files_to_fileset ALL_FILES myproject-tasks

# Task Definition Files
myproject.register_fileset TASK_DEFINITION_FILES
myproject.add_files_to_fileset TASK_DEFINITION_FILES "${MYPROJECT_TASK_DEFINITION_DIRECTORY}"/*

# Implementation Files Only
myproject.register_fileset IMPLEMENTATION_FILES
myproject.find_and_add_files_to_fileset IMPLEMENTATION_FILES \
    "${MYPROJECT_LIB_BASE_DIR}" \
    -type f

# Test Files Only
myproject.register_fileset TEST_FILES
myproject.find_and_add_files_to_fileset TEST_FILES \
    "${TEST_FILES_BASE}" \
    -type f -name '*-test'

# Snapshot Test Files Only
myproject.register_fileset SNAPSHOT_TEST_FILES
myproject.find_and_add_files_to_fileset SNAPSHOT_TEST_FILES \
    "${TEST_FILES_BASE}" \
    -type f -name '*-snapshot-test'

# Snapshot Files Only
myproject.register_fileset SNAPSHOT_FILES
myproject.find_and_add_files_to_fileset SNAPSHOT_FILES \
    "${TEST_SNAPSHOTS_DIR}" \
    -type f

# --------------------------------------------------------------------------------------------------
# Main Tasks

mycmd.defer_at_startup mycmd.init_bin shfmt
function format_shell_files() {
    local -n format_fileset="${1}"

    if myproject.is_verbose_enabled; then
        mycmd.output "Formatting the following files:"
        myproject.list_files "${!format_fileset}"
    fi

    mycmd.bin_execute shfmt --language-dialect bash --indent=4 --binary-next-line --case-indent --write "${format_fileset[@]}"
}

myproject.register_task_with_fileset format format_shell_files ALL_FILES

mycmd.defer_at_startup mycmd.init_bin shellcheck
function lint_shell_files() {
    local -n lint_fileset="${1}"

    if myproject.is_verbose_enabled; then
        mycmd.output "Linting the following files:"
        myproject.list_files "${!lint_fileset}"
    fi

    myproject.output_only_if_not_quiet "Running ShellCheck:"

    mycmd.bin_execute shellcheck --check-sourced "${lint_fileset[@]}"
}

myproject.register_task_with_fileset lint lint_shell_files ALL_FILES

function record_demo() {
    if ! mycmd.init_bin_no_exit vhs; then
        mycmd.error_output "Required tool 'vhs' not found."
        return 1
    fi

    local -r demo_source="${1}"
    local -r output_file="${2}"

    if [[ -e "${output_file}" ]]; then
        rm "${output_file}" &>/dev/null || true
    fi

    mycmd.bin_execute vhs "${demo_source}"
}

myproject.register_task record-demo record_demo

function mycmd_myproject_devel() {
    /usr/bin/env \
        MYCMD_SEARCH_PATH="${MYPROJECT_LIB_BASE_DIR}" \
        mycmd myproject "${@}"
}

myproject.register_task myproject-devel mycmd_myproject_devel

mycmd.defer_at_startup mycmd.init_bin find
function clean_up() {
    mycmd.bin_execute find "${MYPROJECT_ROOT_DIRECTORY}" -type f -name '.DS_Store' -delete
}

myproject.register_task clean-up clean_up

function all() {
    myproject.execute_tasks clean-up \; format \; lint \; test execute-all
}

myproject.register_task all

mycmd.trace "Finished loading the main task definition file."
