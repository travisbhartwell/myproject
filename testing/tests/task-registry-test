#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

if ! TESTS_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching tests directory."
    exit 1
fi
readonly TESTS_DIRECTORY

if ! TESTING_VENDOR_DIRECTORY=$(cd "${TESTS_DIRECTORY}/../vendor" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching testing vendor directory."
    exit 1
fi
readonly TESTING_VENDOR_DIRECTORY

# shellcheck source=./testing-support-lib
source "${TESTS_DIRECTORY}/testing-support-lib"

# --------------------------------------------------------------------------------------------------
# Project Library Loading Tests
function test_mycmd_lib_is_loaded() {
    assertTrue 'MyCmd Lib is loaded' '[ -v _MYCMD_LIB ]'
}

function test_project_lib_is_loaded() {
    assertTrue 'Project Lib is loaded' '[ -v _MYPROJECT_LIB ]'
    assertTrue 'Project Tasks Support Lib is loaded' '[ -v _MYPROJECT_TASK_LIB ]'
    assertTrue 'Project User Support Lib is loaded' '[ -v _MYPROJECT_USER_LIB ]'
}

# --------------------------------------------------------------------------------------------------
# project:task_registry.new_task related tests

# shellcheck disable=SC2154
function test_new_task() {
    local result=0
    project:task_registry._reset_registry
    assertEquals "There should be no tasks registered." \
        0 "${#_MYPROJECT_TASKS[@]}"

    result=0
    project:task_registry.new_task "main" "task1" "function1" || result="${?}"
    assertTrue "Task was successfully registered." "${result}"
    assertEquals "There should be 1 task registered." \
        1 "${#_MYPROJECT_TASKS[@]}"

    result=0
    project:task_registry.new_task "main" "task1" "function1" || result="${?}"
    assertTrue "An identical task registration should succeed." "${result}"
    assertEquals "There should still be 1 task registered." \
        1 "${#_MYPROJECT_TASKS[@]}"

    result=0
    project:task_registry.new_task "main" "task1" "function2" || result="${?}"
    assertFalse "Registering a task with the same name but different function should fail" "${result}"
    assertEquals "There should still be 1 task registered." \
        1 "${#_MYPROJECT_TASKS[@]}"

    project:task_registry._reset_registry
}

# --------------------------------------------------------------------------------------------------
# project:task_registry.get_task related tests

# shellcheck disable=SC2034
function function1() {
    TEST_VARIABLE=1

    assertEquals 3 $#
    assertEquals "arg1" "${1}"
    assertEquals "arg2" "${2}"
    assertEquals "arg3" "${3}"
}

# shellcheck disable=SC2034,SC2154,SC2312
function test_task_definition() {
    declare -gx TEST_VARIABLE=0

    local result=0
    project:task_registry._reset_registry
    assertEquals "There should be no tasks registered." \
        0 "${#_MYPROJECT_TASKS[@]}"
    assertEquals "TEST_VARIABLE should be 0" 0 "${TEST_VARIABLE}"

    result=0
    project:task_registry.new_task "file1" "file1/task1" "function1" arg1 arg2 arg3 || result="${?}"
    # Manually set these since we are not actually loading a real task definition file
    _MYPROJECT_LOADED_TASK_DEFINITION_FILES["file1"]=1
    declare -gx MYPROJECT_ROOT_DIRECTORY="root"
    declare -gx MYPROJECT_TASK_DEFINITION_DIRECTORY="myproject"
    assertTrue "Task was successfully registered." "${result}"
    assertEquals "There should be 1 task registered." \
        1 "${#_MYPROJECT_TASKS[@]}"

    result=0
    project:task_registry.new_task "main" "task1" "function2" || result="${?}"
    _MYPROJECT_LOADED_TASK_DEFINITION_FILES["main"]=1
    assertTrue "Task was successfully registered." "${result}"
    assertEquals "There should be 2 tasks registered." \
        2 "${#_MYPROJECT_TASKS[@]}"

    local -A task1=()
    result=0
    project:task_registry.get_task "invalid-task" task1 || result="${?}"
    assertFalse "Getting an invalid task should fail" "${result}"
    assertEquals "The task1 array should be empty" \
        0 "${#task1[@]}"

    task1=()
    result=0
    project:task_registry.get_task "file1/task1" task1 || result="${?}"
    assertTrue "Getting file1/task1 should succeed" "${result}"
    assertEquals "file1/task1" "$(project:task.get_fully_qualified_name task1)"
    assertEquals "task1" "$(project:task.get_name task1)"
    assertEquals "file1 task1" "$(project:task.get_namespaced_parts_as_string task1)"
    assertEquals "file1" "$(project:task.get_task_definition_file_name task1)"
    assertEquals "function1" "$(project:task.get_function_name task1)"
    assertEquals 3 "$(project:task.get_argument_count task1)"
    assertEquals 0 "$(project:task.get_argument_index task1)"
    local -a arguments=()
    result=0
    project:task.get_arguments task1 arguments || result="${?}"
    assertTrue "Getting file1/task1 arguments should succeed" "${result}"
    assertEquals 3 "${#arguments[@]}"
    assertEquals "arg1" "${arguments[0]}"
    assertEquals "arg2" "${arguments[1]}"
    assertEquals "arg3" "${arguments[2]}"

    result=0
    project:task.execute task1 || result="${?}"
    assertTrue "Executing file1/task1 should succeed" "${result}"
    assertEquals "TEST_VARIABLE should now be 1" \
        1 "${TEST_VARIABLE}"

    task1=()
    result=0
    project:task_registry.get_task "task1" task1 || result="${?}"
    assertTrue "Getting task1 should succeed" "${result}"
    assertEquals "task1" "$(project:task.get_fully_qualified_name task1)"
    assertEquals "task1" "$(project:task.get_name task1)"
    assertEquals "task1" "$(project:task.get_namespaced_parts_as_string task1)"
    assertEquals "main" "$(project:task.get_task_definition_file_name task1)"
    assertEquals "function2" "$(project:task.get_function_name task1)"
    assertEquals 0 "$(project:task.get_argument_count task1)"
    result=0
    project:task.get_argument_index task1 || result="${?}"
    assertFalse "Getting task1 argument index should fail" "${result}"
    arguments=()
    result=0
    project:task.get_arguments task1 arguments || result="${?}"
    assertTrue "Getting task1 arguments should succeed" "${result}"
    assertEquals 0 "${#arguments[@]}"

    result=0
    project:task.execute task1 || result="${?}"
    assertFalse "Executing task1 should fail because function2 doesn't exist" "${result}"

    project:task_registry._reset_registry
    unset TEST_VARIABLE
}

# --------------------------------------------------------------------------------------------------
# Test Helper Functions
function oneTimeSetUp() {
    load_myproject_lib_and_start_tracing
}

function oneTimeTearDown() {
    cleanup_tracing
}

# shellcheck source=../vendor/shunit2
. "${TESTING_VENDOR_DIRECTORY}/shunit2"
