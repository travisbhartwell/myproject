#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

if ! TESTS_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching tests directory."
    exit 1
fi
readonly TESTS_DIRECTORY

if ! TESTING_VENDOR_DIRECTORY=$(cd "${TESTS_DIRECTORY}/../vendor" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching testing vendor directory."
    exit 1
fi
readonly TESTING_VENDOR_DIRECTORY

# shellcheck source=./testing-support-lib
source "${TESTS_DIRECTORY}/testing-support-lib"

# --------------------------------------------------------------------------------------------------
# Project Library Loading Tests
function test_mycmd_lib_is_loaded() {
    assertTrue 'MyCmd Lib is loaded' '[ -v _MYCMD_LIB ]'
}

function test_project_lib_is_loaded() {
    assertTrue 'Project Lib is loaded' '[ -v _MYPROJECT_LIB ]'
    assertTrue 'Project Fileset Support Lib is loaded' '[ -v _MYPROJECT_FILESET_LIB ]'
    assertTrue 'Project Tasks Support Lib is loaded' '[ -v _MYPROJECT_TASK_LIB ]'
    assertTrue 'Project User Support Lib is loaded' '[ -v _MYPROJECT_USER_LIB ]'
}

# --------------------------------------------------------------------------------------------------
# project:fileset_registry.new_fileset related tests
# shellcheck disable=SC2154
function test_new_fileset() {
    assertFalse 'MY_FILESET should not exist' 'declare -p MY_FILESET >/dev/null'
    assertEquals '_MYPROJECT_FILESETS should be empty' \
        0 "${#_MYPROJECT_FILESETS[@]}"

    assertTrue 'Registering MY_FILESET should succeed' \
        'project:fileset_registry.new_fileset MY_FILESET'
    assertTrue 'MY_FILESET should exist' 'declare -p MY_FILESET >/dev/null'
    assertEquals '_MYPROJECT_FILESETS should have 1 element' \
        1 "${#_MYPROJECT_FILESETS[@]}"

    assertTrue 'Registering MY_FILESET again should succeed' \
        'project:fileset_registry.new_fileset MY_FILESET'
    assertEquals '_MYPROJECT_FILESETS should still have 1 element' \
        1 "${#_MYPROJECT_FILESETS[@]}"

    project:fileset_registry._reset_registry

    assertFalse 'MY_FILESET should not exist after resetting' 'declare -p MY_FILESET >/dev/null'
    assertEquals '_MYPROJECT_FILESETS should be empty after resetting' \
        0 "${#_MYPROJECT_FILESETS[@]}"
}

# --------------------------------------------------------------------------------------------------
# project:fileset.add_files related tests
# shellcheck disable=SC2154
function test_add_files_to_fileset() {
    local result=0
    project:fileset_registry.new_fileset MY_FILESET || result="${?}"
    assertTrue 'Registering MY_FILESET should succeed' "${result}"
    assertTrue 'MY_FILESET should exist' 'declare -p MY_FILESET >/dev/null'
    assertEquals '_MYPROJECT_FILESETS should have 1 element' \
        1 "${#_MYPROJECT_FILESETS[@]}"

    # shellcheck disable=SC2034
    declare -gx MYPROJECT_ROOT_DIRECTORY="${VALID_PROJECT_DIRECTORY1}"

    result=0
    project:fileset.add_files NO_FILESET \
        "${VALID_PROJECT_DIRECTORY1}/module1/file1" || result="${?}"
    assertFalse 'Attempting to add a file to a non-existing fileset should fail' "${result}"

    result=0
    project:fileset.add_files MY_FILESET || result="${?}"
    assertFalse 'Attempting to add no files to fileset should fail' "${result}"
    assertEquals 'MY_FILESET should still be empty' \
        0 "${#MY_FILESET[@]}"

    result=0
    project:fileset._sort MY_FILESET || result="${?}"
    assertTrue 'Sorting an empty fileset should succeed' "${result}"

    result=0
    project:fileset.add_files MY_FILESET \
        "${VALID_PROJECT_DIRECTORY1}/module2/file1" \
        "${VALID_PROJECT_DIRECTORY1}/module1/file1" \
        "${VALID_PROJECT_DIRECTORY1}/module1/dir1/file1" \
        "${VALID_PROJECT_DIRECTORY1}/module1/dir2/file1" || result="${?}"
    assertFalse 'Adding files to MY_FILESET with a missing file should return non-zero' "${result}"
    assertEquals 'MY_FILESET should have 3 elements' \
        3 "${#MY_FILESET[@]}"
    assertEquals "The first element of MY_FILESET should be 'module1/dir1/file1'" \
        'module1/dir1/file1' "${MY_FILESET[0]}"
    assertEquals "The second element of MY_FILESET should be 'module1/dir2/file1'" \
        'module1/dir2/file1' "${MY_FILESET[1]}"
    assertEquals "The third element of MY_FILESET should be 'module1/file1'" \
        'module1/file1' "${MY_FILESET[2]}"

    result=0
    project:fileset.add_files MY_FILESET \
        "${VALID_PROJECT_DIRECTORY1}/module1/dir1/sub1/file3" \
        "${VALID_PROJECT_DIRECTORY1}/module1/file2" || result="${?}"
    assertTrue 'Adding more files to MY_FILESET should succeed' "${result}"
    assertEquals 'MY_FILESET should have 5 elements' \
        5 "${#MY_FILESET[@]}"

    assertEquals "The first element of MY_FILESET should be 'module1/dir1/file1'" \
        'module1/dir1/file1' "${MY_FILESET[0]}"
    assertEquals "The second element of MY_FILESET should be 'module1/dir1/sub1/file3'" \
        'module1/dir1/sub1/file3' "${MY_FILESET[1]}"
    assertEquals "The third element of MY_FILESET should be 'module1/dir2/file1'" \
        'module1/dir2/file1' "${MY_FILESET[2]}"
    assertEquals "The fourth element of MY_FILESET should be 'module1/file1'" \
        'module1/file1' "${MY_FILESET[3]}"
    assertEquals "The fifth element of MY_FILESET should be 'module1/file2'" \
        'module1/file2' "${MY_FILESET[4]}"

    unset MYPROJECT_ROOT_DIRECTORY
}

# --------------------------------------------------------------------------------------------------
# Test Helper Functions
function setUp() {
    project:fileset_registry._reset_registry
}

function oneTimeSetUp() {
    copy_test_source_data

    load_myproject_lib_and_start_tracing
}

function oneTimeTearDown() {
    cleanup_test_data

    cleanup_tracing
}

# shellcheck source=../vendor/shunit2
. "${TESTING_VENDOR_DIRECTORY}/shunit2"
