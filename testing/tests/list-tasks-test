#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

if ! TESTS_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching tests directory."
    exit 1
fi
readonly TESTS_DIRECTORY

if ! TESTING_VENDOR_DIRECTORY=$(cd "${TESTS_DIRECTORY}/../vendor" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching testing vendor directory."
    exit 1
fi
readonly TESTING_VENDOR_DIRECTORY

# shellcheck source=./testing-support-lib
source "${TESTS_DIRECTORY}/testing-support-lib"

# --------------------------------------------------------------------------------------------------
# Project Library Loading Tests
function test_mycmd_lib_is_loaded() {
    assertTrue 'MyCmd Lib is loaded' '[ -v _MYCMD_LIB ]'
}

function test_project_lib_is_loaded() {
    assertTrue 'Project Lib is loaded' '[ -v _MYPROJECT_LIB ]'
    assertTrue 'Project Fileset Support Lib is loaded' '[ -v _MYPROJECT_FILESET_LIB ]'
    assertTrue 'Project Tasks Support Lib is loaded' '[ -v _MYPROJECT_TASK_LIB ]'
    assertTrue 'Project User Support Lib is loaded' '[ -v _MYPROJECT_USER_LIB ]'
}

# --------------------------------------------------------------------------------------------------
# project.load_all_task_definition_files/project:task_registry._get_all_task_namespaced_parts tests
function test_get_all_task_namespaced_parts() {
    project:task_registry._reset_registry

    local result=0
    # shellcheck disable=SC2154
    pushd "${VALID_PROJECT_DIRECTORY1}" &>/dev/null || true
    project.load_closest_task_definition || result="${?}"
    assertTrue "The main task definition file successfully loads" \
        "${result}"

    result=0
    project.load_all_task_definition_files || result="${?}"
    assertTrue "Loading all task definition files succeeds" \
        "${result}"

    local -a all_tasks_namespaced_parts=()
    result=0
    project:task_registry._get_all_task_namespaced_parts all_tasks_namespaced_parts || result="${?}"
    assertTrue "Getting all task namespaced parts succeeds" \
        "${result}"
    assertEquals "There are 8 tasks listed" \
        8 "${#all_tasks_namespaced_parts[@]}"
    assertEquals "list-data-files" "${all_tasks_namespaced_parts[0]}"
    assertEquals "list-task-definition-files" "${all_tasks_namespaced_parts[1]}"
    assertEquals "task1" "${all_tasks_namespaced_parts[2]}"
    assertEquals "task2" "${all_tasks_namespaced_parts[3]}"
    assertEquals "task3" "${all_tasks_namespaced_parts[4]}"
    assertEquals "sub task1" "${all_tasks_namespaced_parts[5]}"
    assertEquals "sub task2" "${all_tasks_namespaced_parts[6]}"
    assertEquals "sub task3" "${all_tasks_namespaced_parts[7]}"

    popd &>/dev/null || true
}

# --------------------------------------------------------------------------------------------------
# Test Helper Functions
function oneTimeSetUp() {
    copy_test_source_data

    load_myproject_lib_and_start_tracing
}

function oneTimeTearDown() {
    cleanup_test_data

    cleanup_tracing
}

# shellcheck source=../vendor/shunit2
. "${TESTING_VENDOR_DIRECTORY}/shunit2"
