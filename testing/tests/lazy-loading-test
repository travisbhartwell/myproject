#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

if ! TESTS_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching tests directory."
    exit 1
fi
readonly TESTS_DIRECTORY

if ! TEST_VENDOR_DIRECTORY=$(cd "${TESTS_DIRECTORY}/../vendor" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test vendor directory."
    exit 1
fi
readonly TEST_VENDOR_DIRECTORY

# shellcheck source=./testing-support-lib
source "${TESTS_DIRECTORY}/testing-support-lib"

# --------------------------------------------------------------------------------------------------
# Project Library Loading Tests
function test_mycmd_lib_is_loaded() {
    assertTrue 'MyCmd Lib is loaded' '[ -v _MYCMD_LIB ]'
}

function test_project_lib_is_loaded() {
    assertTrue 'Project Lib is loaded' '[ -v _MYPROJECT_LIB ]'
    assertTrue 'Project Tasks Support Lib is loaded' '[ -v _MYPROJECT_TASK_LIB ]'
    assertTrue 'Project User Support Lib is loaded' '[ -v _MYPROJECT_USER_LIB ]'
}

# --------------------------------------------------------------------------------------------------
# project.get_task tests
function test_lazy_load_get_task_fails() {
    project:task_registry._reset_registry

    local result=0
    # shellcheck disable=SC2154
    pushd "${VALID_PROJECT_DIRECTORY3}" &>/dev/null || true
    project.load_closest_task_definition || result="${?}"
    assertTrue "The main task definition file successfully loads" \
        "${result}"
    # shellcheck disable=SC2154
    assertEquals "There should be 0 tasks registered." \
        0 "${#_MYPROJECT_TASKS[@]}"
    # shellcheck disable=SC2154
    assertEquals "There should be 1 task definition file loaded." \
        1 "${#_MYPROJECT_LOADED_TASK_DEFINITION_FILES[@]}"

    local -A task1=()
    result=0
    project:task_registry.get_task "sub/task1" task1 || result="${?}"
    assertFalse "Getting sub/task1 should fail as sub should fail to load" "${result}"
    assertEquals "The task1 array should be empty" \
        0 "${#task1[@]}"
    assertEquals "There should still be 0 tasks registered." \
        0 "${#_MYPROJECT_TASKS[@]}"
    assertEquals "There should still be 1 task definition file loaded." \
        1 "${#_MYPROJECT_LOADED_TASK_DEFINITION_FILES[@]}"
    popd &>/dev/null || true
}

# --------------------------------------------------------------------------------------------------
# project.execute_task tests
# shellcheck disable=SC2034,SC2154,SC2312
function test_lazy_load_and_execute_task() {
    project:task_registry._reset_registry

    local result=0
    pushd "${VALID_PROJECT_DIRECTORY1}" &>/dev/null || true
    project.load_closest_task_definition || result="${?}"
    assertTrue "The main task definition file successfully loads" \
        "${result}"
    assertEquals "There should be 3 tasks registered." \
        3 "${#_MYPROJECT_TASKS[@]}"
    assertEquals "There should be 1 task definition file loaded." \
        1 "${#_MYPROJECT_LOADED_TASK_DEFINITION_FILES[@]}"
    assertEquals "PROJECT_VARIABLE should be 1" 1 "${PROJECT_VARIABLE}"

    local -A task1=()
    result=0
    project:task_registry.get_task "task1" task1 || result="${?}"
    assertTrue "Getting task1 should succeed" "${result}"
    assertEquals "task1" "$(project:task.get_fully_qualified_name task1)"
    assertEquals "task1" "$(project:task.get_name task1)"
    assertEquals "task1" "$(project:task.get_namespaced_parts_as_string task1)"
    assertEquals "main" "$(project:task.get_task_definition_file_name task1)"
    assertEquals "task_function1" "$(project:task.get_function_name task1)"
    assertEquals 0 "$(project:task.get_argument_count task1)"
    result=0
    project:task.get_argument_index task1 || result="${?}"
    assertFalse "Getting task1 argument index should fail" "${result}"

    result=0
    project.execute_task "task1" || result="${?}"
    assertTrue "Executing task1 should succeed" "${result}"
    assertEquals "PROJECT_VARIABLE should now be 2" \
        2 "${PROJECT_VARIABLE}"

    local -A sub_task1=()
    result=0
    project:task_registry.get_task "sub/task1" sub_task1 || result="${?}"
    assertTrue "Getting sub/task1 should succeed" "${result}"
    assertEquals "There should now be 6 tasks registered." \
        6 "${#_MYPROJECT_TASKS[@]}"
    assertEquals "There should now be 2 task definition file loaded." \
        2 "${#_MYPROJECT_LOADED_TASK_DEFINITION_FILES[@]}"
    assertEquals "sub/task1" "$(project:task.get_fully_qualified_name sub_task1)"
    assertEquals "task1" "$(project:task.get_name sub_task1)"
    assertEquals "sub task1" "$(project:task.get_namespaced_parts_as_string sub_task1)"
    assertEquals "sub" "$(project:task.get_task_definition_file_name sub_task1)"
    assertEquals "sub_task_function1" "$(project:task.get_function_name sub_task1)"
    assertEquals 0 "$(project:task.get_argument_count sub_task1)"
    result=0
    project:task.get_argument_index sub_task1 || result="${?}"
    assertFalse "Getting 'sub/task1' argument index should fail" "${result}"
    result=0
    project.execute_task "sub" "task1" || result="${?}"
    assertFalse "Executing 'sub/task1' should fail" "${result}"

    result=0
    project.execute_task "invalid-task" || result="${?}"
    assertFalse "Executing 'invalid-task' should fail" "${result}"

    result=0
    project.execute_task "sub" "invalid-task" || result="${?}"
    assertFalse "Executing 'sub invalid-task' should fail" "${result}"

    popd &>/dev/null || true
}

# --------------------------------------------------------------------------------------------------
# Test Helper Functions
function oneTimeSetUp() {
    copy_test_source_data

    load_myproject_lib_and_start_tracing
}

function oneTimeTearDown() {
    cleanup_test_data

    cleanup_tracing
}

# shellcheck source=../vendor/shunit2
. "${TEST_VENDOR_DIRECTORY}/shunit2"
