#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

if ! TEST_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test directory."
    exit 1
fi
readonly TEST_DIRECTORY

if ! TEST_VENDOR_DIRECTORY=$(cd "${TEST_DIRECTORY}/../vendor" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test vendor directory."
    exit 1
fi
readonly TEST_VENDOR_DIRECTORY

# shellcheck source=./testing-support-lib
source "${TEST_DIRECTORY}/testing-support-lib"

# Common constants for paths used in tests
# shellcheck disable=SC2154
readonly USER_MAPPING_CONFIG="${_MYCMD_TEST_USER_CONFIG_HOME}/myproject/mapping-config"
# shellcheck disable=SC2154
readonly INVALID_NO_TASK_DEFINITION_DIRECTORY="${TEST_DATA_DIRECTORY}/invalid/no-myproject"
readonly INVALID_NO_MYPROJECT_MAIN_DIRECTORY="${TEST_DATA_DIRECTORY}/invalid/no-myproject-main"
readonly VALID_PROJECT_DIRECTORY2="${TEST_DATA_DIRECTORY}/valid/valid2"
readonly VALID_TASK_DEFINITION_DIRECTORY2="${VALID_PROJECT_DIRECTORY2}/myproject"
readonly VALID_PROJECT_DIRECTORY3="${TEST_DATA_DIRECTORY}/valid/valid3"
readonly VALID_TASK_DEFINITION_DIRECTORY3="${VALID_PROJECT_DIRECTORY3}/myproject"
# shellcheck disable=SC2154
readonly MAPPING_CONFIG_FILE1="${TEST_MAPPING_CONFIG_DIRECTORY}/config1"

# --------------------------------------------------------------------------------------------------
# Project Library Loading Tests
function test_mycmd_lib_is_loaded() {
    assertTrue 'MyCmd Lib is loaded' '[ -v _MYCMD_LIB ]'
}

function test_project_lib_is_loaded() {
    assertTrue 'Project Lib is loaded' '[ -v _MYPROJECT_LIB ]'
    assertTrue 'Project Tasks Support Lib is loaded' '[ -v _MYPROJECT_TASK_LIB ]'
    assertTrue 'Project User Support Lib is loaded' '[ -v _MYPROJECT_USER_LIB ]'
}

# --------------------------------------------------------------------------------------------------
# project.find_up Tests
# shellcheck disable=SC2034
function test_find_up_invalid_projects() {
    local -a project_directories=()
    local result=0

    project.find_up project_directories "/invalid-directory" || result="${?}"
    assertFalse "'/invalid-directory' does not exist," \
        "${result}"
    assertEquals "project_directories should be empty" \
        0 "${#project_directories[@]}"

    project_directories=()
    result=0

    project.find_up project_directories "${INVALID_NO_TASK_DEFINITION_DIRECTORY}" || result="${?}"
    assertFalse "'${INVALID_NO_TASK_DEFINITION_DIRECTORY}' does not have a corresponding MyProject Task Defintion directory" \
        "${result}"
    assertEquals "project_directories should be empty" \
        0 "${#project_directories[@]}"

    project_directories=()
    result=0

    project.find_up project_directories "${INVALID_NO_MYPROJECT_MAIN_DIRECTORY}" || result="${?}"
    assertFalse "'${INVALID_NO_MYPROJECT_MAIN_DIRECTORY}' is missing a myproject/main file" \
        "${result}"
    assertEquals "project_directories should be empty" \
        0 "${#project_directories[@]}"
}

# shellcheck disable=SC2034
function test_find_up_valid_projects() {
    local -a project_directories=()
    local result=0

    # shellcheck disable=SC2153,SC2154
    project.find_up project_directories "${VALID_PROJECT_DIRECTORY1}" || result="${?}"
    assertTrue "'${VALID_PROJECT_DIRECTORY1}' is a valid project" \
        "${result}"

    assertEquals "project_directories should have two entries" \
        2 "${#project_directories[@]}"
    assertEquals "${VALID_PROJECT_DIRECTORY1} is the project root directory" \
        "${VALID_PROJECT_DIRECTORY1}" "${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    assertEquals "${VALID_PROJECT_DIRECTORY1}/myproject is the task definition directory" \
        "${VALID_PROJECT_DIRECTORY1}/myproject" "${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"

    project_directories=()
    result=0

    local -r valid_project_module_dir="${VALID_PROJECT_DIRECTORY1}/module1"
    project.find_up project_directories "${valid_project_module_dir}" || result="${?}"
    assertTrue "'${valid_project_module_dir}' is in a valid project" \
        "${result}"

    assertEquals "project_directories should have two entries" \
        2 "${#project_directories[@]}"
    assertEquals "${VALID_PROJECT_DIRECTORY1} is the project root directory" \
        "${VALID_PROJECT_DIRECTORY1}" "${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    # shellcheck disable=SC2153,SC2154
    assertEquals "${VALID_PROJECT_DIRECTORY1}/myproject is the task definition directory" \
        "${VALID_TASK_DEFINITION_DIRECTORY1}" "${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"
}

# shellcheck disable=SC2034
function test_find_up_mapping_config() {
    local -r project_root_directory="${INVALID_NO_TASK_DEFINITION_DIRECTORY}"
    local -r task_definition_directory="${VALID_TASK_DEFINITION_DIRECTORY1}"

    export MYPROJECT_MAPPING="${project_root_directory}:${task_definition_directory}"

    local -a project_directories=()
    local result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertTrue "'${project_root_directory}' is a valid project" \
        "${result}"

    assertEquals "project_directories should have two entries" \
        2 "${#project_directories[@]}"
    assertEquals "${project_root_directory} is the project root directory" \
        "${project_root_directory}" "${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    assertEquals "${task_definition_directory} is the task definition directory" \
        "${task_definition_directory}" "${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"

    unset MYPROJECT_MAPPING

    # Validate that it fails after removing mapping
    project_directories=()
    result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertFalse "'${project_root_directory}' does not have a corresponding task defintion directory" \
        "${result}"
    assertEquals "project_directories should be empty" \
        0 "${#project_directories[@]}"
}

# shellcheck disable=SC2034
function test_find_up_mapping_config_override_valid() {
    local -r project_root_directory="${VALID_PROJECT_DIRECTORY1}"
    local -r task_definition_directory="${VALID_TASK_DEFINITION_DIRECTORY2}"

    export MYPROJECT_MAPPING="${project_root_directory}:${task_definition_directory}"

    local -a project_directories=()
    local result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertTrue "'${project_root_directory}' is a valid project" \
        "${result}"

    assertEquals "project_directories should have two entries" \
        2 "${#project_directories[@]}"
    assertEquals "${project_root_directory} is the project root directory" \
        "${project_root_directory}" "${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    assertEquals "${task_definition_directory} is the task definition directory" \
        "${task_definition_directory}" "${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"

    unset MYPROJECT_MAPPING

    # Validate that it returns the in-project task definition after removing mapping
    local -r original_task_definition_directory="${VALID_TASK_DEFINITION_DIRECTORY1}"

    project_directories=()
    result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertTrue "'${project_root_directory}' is a valid project" \
        "${result}"

    assertEquals "project_directories should have two entries" \
        2 "${#project_directories[@]}"
    assertEquals "${project_root_directory} is the project root directory" \
        "${project_root_directory}" "${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    assertEquals "${original_task_definition_directory} is the task definition directory" \
        "${original_task_definition_directory}" "${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"
}

# shellcheck disable=SC2034
function test_find_up_mapping_config_file_env_variable() {
    local -r project_root_directory="${INVALID_NO_TASK_DEFINITION_DIRECTORY}"
    local -r task_definition_directory="${VALID_TASK_DEFINITION_DIRECTORY1}"

    export MYPROJECT_MAPPING_CONFIG="${MAPPING_CONFIG_FILE1}"

    local -a project_directories=()
    local result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertTrue "'${project_root_directory}' is a valid project" \
        "${result}"

    assertEquals "project_directories should have two entries" \
        2 "${#project_directories[@]}"
    assertEquals "${project_root_directory} is the project root directory" \
        "${project_root_directory}" "${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    assertEquals "${task_definition_directory} is the task definition directory" \
        "${task_definition_directory}" "${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"

    unset MYPROJECT_MAPPING_CONFIG

    # Validate that it fails after removing mapping
    project_directories=()
    result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertFalse "'${project_root_directory}' does not have a corresponding MyProject Task Defintion directory" \
        "${result}"
    assertEquals "project_directories should be empty" \
        0 "${#project_directories[@]}"
}

# shellcheck disable=SC2034
function test_find_up_mapping_user_config_file() {
    local -r project_root_directory="${INVALID_NO_TASK_DEFINITION_DIRECTORY}"
    local -r task_definition_directory="${VALID_TASK_DEFINITION_DIRECTORY1}"

    generate_mapping_config1 "${USER_MAPPING_CONFIG}"

    local -a project_directories=()
    local result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertTrue "'${project_root_directory}' is a valid project" \
        "${result}"

    assertEquals "project_directories should have two entries" \
        2 "${#project_directories[@]}"
    assertEquals "${project_root_directory} is the project root directory" \
        "${project_root_directory}" "${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    assertEquals "${task_definition_directory} is the task definition directory" \
        "${task_definition_directory}" "${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"

    rm "${USER_MAPPING_CONFIG}"

    # Validate that it fails after removing mapping
    project_directories=()
    result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertFalse "'${project_root_directory}' does not have a corresponding MyProject Task Defintion directory" \
        "${result}"
    assertEquals "project_directories should be empty" \
        0 "${#project_directories[@]}"
}

# shellcheck disable=SC2034
function test_find_up_mapping_config_file_env_variable_override_valid() {
    local -r project_root_directory="${VALID_PROJECT_DIRECTORY1}"
    local -r task_definition_directory="${VALID_TASK_DEFINITION_DIRECTORY2}"

    export MYPROJECT_MAPPING_CONFIG="${MAPPING_CONFIG_FILE1}"

    local -a project_directories=()
    local result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertTrue "'${project_root_directory}' is a valid project" \
        "${result}"

    assertEquals "project_directories should have two entries" \
        2 "${#project_directories[@]}"
    assertEquals "${project_root_directory} is the project root directory" \
        "${project_root_directory}" "${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    assertEquals "${task_definition_directory} is the task definition directory" \
        "${task_definition_directory}" "${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"

    unset MYPROJECT_MAPPING_CONFIG

    # Validate that it returns the in-project task definition after removing mapping
    local -r original_task_definition_directory="${VALID_TASK_DEFINITION_DIRECTORY1}"

    project_directories=()
    result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertTrue "'${project_root_directory}' is a valid project" \
        "${result}"

    assertEquals "project_directories should have two entries" \
        2 "${#project_directories[@]}"
    assertEquals "${project_root_directory} is the project root directory" \
        "${project_root_directory}" "${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    assertEquals "${original_task_definition_directory} is the task definition directory" \
        "${original_task_definition_directory}" "${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"
}

function test_find_up_config_priority() {
    local -r project_root_directory="${INVALID_NO_TASK_DEFINITION_DIRECTORY}"
    local -r task_definition_directory="${VALID_TASK_DEFINITION_DIRECTORY2}"

    export MYPROJECT_MAPPING_CONFIG="${MAPPING_CONFIG_FILE1}"
    export MYPROJECT_MAPPING="${INVALID_NO_TASK_DEFINITION_DIRECTORY}:${VALID_TASK_DEFINITION_DIRECTORY2}"
    generate_mapping_config2 "${USER_MAPPING_CONFIG}"

    local -a project_directories=()
    local result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertTrue "'${project_root_directory}' is a valid project" \
        "${result}"

    assertEquals "project_directories should have two entries" \
        2 "${#project_directories[@]}"
    assertEquals "${project_root_directory} is the project root directory" \
        "${project_root_directory}" "${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    assertEquals "${task_definition_directory} is the task definition directory" \
        "${task_definition_directory}" "${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"

    unset MYPROJECT_MAPPING

    # Validate that it returns the environment variable config file task definition after removing mapping
    local -r env_config_task_definition_directory="${VALID_TASK_DEFINITION_DIRECTORY1}"

    project_directories=()
    result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertTrue "'${project_root_directory}' is a valid project" \
        "${result}"

    assertEquals "project_directories should have two entries" \
        2 "${#project_directories[@]}"
    assertEquals "${project_root_directory} is the project root directory" \
        "${project_root_directory}" "${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    assertEquals "${env_config_task_definition_directory} is the task definition directory" \
        "${env_config_task_definition_directory}" "${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"

    unset MYPROJECT_MAPPING_CONFIG

    # Validate that it returns the user config task definition after unseting MYPROJECT_MAPPING_CONFIG
    local -r user_config_task_definition_directory="${VALID_TASK_DEFINITION_DIRECTORY3}"

    project_directories=()
    result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertTrue "'${project_root_directory}' is a valid project" \
        "${result}"

    assertEquals "project_directories should have two entries" \
        2 "${#project_directories[@]}"
    assertEquals "${project_root_directory} is the project root directory" \
        "${project_root_directory}" "${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    assertEquals "${user_config_task_definition_directory} is the task definition directory" \
        "${user_config_task_definition_directory}" "${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"

    # Validate it is not a project with no mapping
    rm "${USER_MAPPING_CONFIG}"

    project_directories=()
    result=0

    project.find_up project_directories "${project_root_directory}" || result="${?}"
    assertFalse "'${project_root_directory}' does not have a corresponding MyProject Task Defintion directory" \
        "${result}"
    assertEquals "project_directories should be empty" \
        0 "${#project_directories[@]}"
}

# --------------------------------------------------------------------------------------------------
# project._load_mapping_configuration Tests

# shellcheck disable=SC2016,SC2034,SC2153,SC2154
function test_mapping_env_variable() {
    assertEquals "There are 0 items in the _MYPROJECT_MAPPINGS array to start" \
        0 "${#_MYPROJECT_MAPPINGS[@]}"

    export MYPROJECT_MAPPING="/invalid-path:${VALID_TASK_DEFINITION_DIRECTORY1}"
    project._load_mapping_configuration
    assertEquals "There are still 0 items in the _MYPROJECT_MAPPINGS array after invalid project path" \
        0 "${#_MYPROJECT_MAPPINGS[@]}"

    export MYPROJECT_MAPPING="${INVALID_NO_TASK_DEFINITION_DIRECTORY}:/invalid-path"
    project._load_mapping_configuration
    assertEquals "There are still 0 items in the _MYPROJECT_MAPPINGS array after invalid myproject path" \
        0 "${#_MYPROJECT_MAPPINGS[@]}"

    export MYPROJECT_MAPPING="${INVALID_NO_TASK_DEFINITION_DIRECTORY}:${INVALID_NO_MYPROJECT_MAIN_DIRECTORY}"
    project._load_mapping_configuration
    assertEquals "There are still 0 items in the _MYPROJECT_MAPPINGS array after myproject dir without main" \
        0 "${#_MYPROJECT_MAPPINGS[@]}"

    export MYPROJECT_MAPPING="${INVALID_NO_TASK_DEFINITION_DIRECTORY}:${VALID_TASK_DEFINITION_DIRECTORY1}"
    project._load_mapping_configuration
    assertEquals "There are now 1 items in the _MYPROJECT_MAPPINGS array after valid project root directory and task definition directory" \
        1 "${#_MYPROJECT_MAPPINGS[@]}"

    unset MYPROJECT_MAPPING
}

function test_mapping_config_file_env_variable() {
    export MYPROJECT_MAPPING_CONFIG="${MAPPING_CONFIG_FILE1}"
    project._load_mapping_configuration
    unset MYPROJECT_MAPPING_CONFIG

    local -r loaded_config_counts=2
    assertEquals "There are ${loaded_config_counts} items in the _MYPROJECT_MAPPINGS array after loading the config file" \
        "${loaded_config_counts}" "${#_MYPROJECT_MAPPINGS[@]}"
}

function test_mapping_user_config_file() {
    generate_mapping_config1 "${USER_MAPPING_CONFIG}"
    project._load_mapping_configuration

    local -r loaded_config_counts=2
    assertEquals "There are ${loaded_config_counts} items in the _MYPROJECT_MAPPINGS array after loading the config file" \
        "${loaded_config_counts}" "${#_MYPROJECT_MAPPINGS[@]}"

    rm "${USER_MAPPING_CONFIG}" || true
}

# --------------------------------------------------------------------------------------------------
# project._is_valid_task_definition_directory Tests

# shellcheck disable=SC2016,SC2034
function test_is_valid_task_definition_directory() {
    assertFalse "'${INVALID_NO_TASK_DEFINITION_DIRECTORY}' is not named 'myproject', so not a task definition directory." \
        'project._is_valid_task_definition_directory "${INVALID_NO_TASK_DEFINITION_DIRECTORY}"'

    assertFalse "'${INVALID_NO_MYPROJECT_MAIN_DIRECTORY}' is missing the 'main' file, so not a task definition directory." \
        'project._is_valid_task_definition_directory "${INVALID_NO_MYPROJECT_MAIN_DIRECTORY}"'

    assertTrue "'${VALID_TASK_DEFINITION_DIRECTORY1}' is a valid task definition directory" \
        'project._is_valid_task_definition_directory "${VALID_TASK_DEFINITION_DIRECTORY1}"'
}

# --------------------------------------------------------------------------------------------------
# Test Helper Functions

function generate_mapping_config1() {
    local -r config_file="${1}"

    {
        # Invalid project path that will be ignored
        echo "/invalid-path=${VALID_TASK_DEFINITION_DIRECTORY1}"
        # Invalid myproject path that will be ignored
        echo "${INVALID_NO_TASK_DEFINITION_DIRECTORY}=/invalid-path"
        # MyProject Dir without main file
        echo "${INVALID_NO_TASK_DEFINITION_DIRECTORY}=${INVALID_NO_MYPROJECT_MAIN_DIRECTORY}"
        # Valid Configuration
        echo "${INVALID_NO_TASK_DEFINITION_DIRECTORY}=${VALID_TASK_DEFINITION_DIRECTORY1}"
        # Override Configuration
        echo "${VALID_PROJECT_DIRECTORY1}=${VALID_TASK_DEFINITION_DIRECTORY2}"
    } >>"${config_file}"
}

function generate_mapping_config2() {
    local -r config_file="${1}"

    {
        # Override Configuration
        echo "${INVALID_NO_TASK_DEFINITION_DIRECTORY}=${VALID_TASK_DEFINITION_DIRECTORY3}"
    } >>"${config_file}"
}

function oneTimeSetUp() {
    copy_test_source_data

    generate_mapping_config1 "${MAPPING_CONFIG_FILE1}"

    load_myproject_lib_and_start_tracing
}

function oneTimeTearDown() {
    cleanup_test_data

    cleanup_tracing
}

# shellcheck source=../vendor/shunit2
. "${TEST_VENDOR_DIRECTORY}/shunit2"
