#!/usr/bin/env -S mycmd
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

mycmd:command.register_version "0.1"
mycmd:command.register_short_description "List the filesets defined by the current MyProject project."

# shellcheck disable=SC2154
mycmd:command.register_help_text "${_MYCMD_NAMESPACED_PARTS_STRING} [-q|--quiet] [-f|--format=[plain|table]]\n"
mycmd:command.register_help_text "${_MYCMD_NAMESPACED_PARTS_STRING} -h | --help"
mycmd:command.register_help_text "${_MYCMD_NAMESPACED_PARTS_STRING} -v | --version"
mycmd:command.register_help_text "Options:"
mycmd:command.register_help_text "\t-h | --help    - Show this help"
mycmd:command.register_help_text "\t-v | --version - Show this command's version"
mycmd:command.register_help_text "\t-q | --quiet   - Only show names of the filesets"
mycmd:command.register_help_text "\t-f | --format  - Select the output format: plain or table format, table is the default"

[[ -n "${_MYCMD_SOURCING_FOR_HELP:-}" ]] && return

set -o nounset -o errexit -o errtrace -o pipefail

function mycmd.main() {
    # shellcheck disable=SC2034
    local -A arguments=()

    if ! project_info.parse_format_command_line arguments project_info.list_filesets "${@}"; then
        mycmd.err_exit 1 "Error parsing command line: '${*}'"
    fi

    project_info.enable_quiet_mode_if_set_in_arguments arguments

    if ! project.load_all_task_definition_files; then
        exit 1
    fi

    project_info.call_output_fn_from_arguments arguments
}
