# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# MyCmd Project Command Group Library
#   Library for Project Task Runner Functionality

set -o nounset -o errexit -o errtrace -o pipefail

(return 0 >/dev/null 2>&1) || {
    # coverage skip: 2
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

mycmd:command_group.register_version "0.1"
mycmd:command_group.register_short_description "MyProject Command Group Library"
mycmd:command_group.register_help_text "The MyProject Project Task Runner"

[[ -n "${_MYCMD_SOURCING_FOR_HELP:-}" ]] && return

[[ -n "${_MYPROJECT_LIB:-}" ]] && return
readonly _MYPROJECT_LIB=1

mycmd:command_group.load_support_lib "task"
mycmd:command_group.load_support_lib "user"

declare -Agx _MYPROJECT_MAPPINGS=()

readonly _PROJECT_ROOT_DIRECTORY=0
readonly _PROJECT_TASK_DEFINITION_DIRECTORY=1

_MYPROJECT_USER_CONFIG_FILE="$(mycmd:command_group.get_config_file "mapping-config")"
readonly _MYPROJECT_USER_CONFIG_FILE

# --------------------------------------------------------------------------------------------------
# Project Locating Public Functions
function project.find_up() {
    project._load_mapping_configuration

    project._find_up "${@}"
}

# --------------------------------------------------------------------------------------------------
# Project Locating Private Helper Functions
function project._load_mapping_configuration() {
    _MYPROJECT_MAPPINGS=()

    local -r mapping_config_file="${MYPROJECT_MAPPING_CONFIG:-${_MYPROJECT_USER_CONFIG_FILE}}"
    project._load_mapping_config_file "${mapping_config_file}"

    # Parse MYPROJECT_MAPPING last so it can override values from the configuration file
    if [[ -n "${MYPROJECT_MAPPING-}" ]]; then
        local -r project_root_directory="${MYPROJECT_MAPPING%%:*}"
        local -r task_definition_directory="${MYPROJECT_MAPPING##*:}"
        mycmd.trace "Checking '${MYPROJECT_MAPPING}' with project root directory '${project_root_directory}' and task definition directory '${task_definition_directory}'."

        project._add_task_definition_directory_mapping_if_valid "${project_root_directory}" "${task_definition_directory}"
    fi

    project._log_myproject_mappings
}

function project._load_mapping_config_file() {
    local -r mapping_config_file="${1}"

    if ! [[ -e "${mapping_config_file}" ]]; then
        mycmd.debug "MyProject Mapping Configuration file '${mapping_config_file}' does not exist."
        return
    fi

    local -a config_lines=()

    readarray -t config_lines <"${mapping_config_file}"

    mycmd.trace "Processing ${#config_lines[@]} lines from mapping config file '${mapping_config_file}'."

    local line
    local project_root_directory
    local task_definition_directory

    for line in "${config_lines[@]}"; do
        mycmd.trace "Processing config file line:"
        mycmd.trace "${line}"

        project_root_directory="${line%%=*}"
        task_definition_directory="${line##*=}"

        project._add_task_definition_directory_mapping_if_valid "${project_root_directory}" "${task_definition_directory}"
    done
}

function project._add_task_definition_directory_mapping_if_valid() {
    local project_root_directory="${1}"
    local task_definition_directory="${2}"

    mycmd.trace "Checking mapping with project root directory '${project_root_directory}' and task definition directory '${task_definition_directory}'."

    if ! project_root_directory="$(project._resolve_directory "${project_root_directory}")"; then
        mycmd.debug "Error canonicalizing project root directory, ignoring mapping."
        return
    fi
    readonly project_root_directory

    if ! task_definition_directory="$(project._resolve_directory "${task_definition_directory}")"; then
        mycmd.debug "Error canonicalizing task definition directory, ignoring mapping."
        return
    fi
    readonly task_definition_directory

    if ! project._is_valid_task_definition_directory "${task_definition_directory}"; then
        mycmd.debug "'${task_definition_directory}' is not a valid task definition directory, ignoring mapping."
        return
    fi

    mycmd.trace "Configuring mapping for '${project_root_directory}' as '${task_definition_directory}'."
    _MYPROJECT_MAPPINGS["${project_root_directory}"]="${task_definition_directory}"
}

function project._log_myproject_mappings() {
    # TODO: Use mycmd.print_table when it can use mycmd.trace
    mycmd.trace "MyProject Mapping is configured with ${#_MYPROJECT_MAPPINGS[@]} entries.\n"

    local project_root_directory
    local task_definition_directory
    for project_root_directory in "${!_MYPROJECT_MAPPINGS[@]}"; do
        task_definition_directory="${_MYPROJECT_MAPPINGS["${project_root_directory}"]}"
        mycmd.trace "'${project_root_directory}' is mapped to use the task definition directory '${task_definition_directory}'."
    done
}

function project._resolve_directory() {
    local directory="${1}"
    directory=${directory/#\~/${HOME}}
    mycmd.canonicalize_path "${directory}"
}

function project._is_valid_task_definition_directory() {
    local -r task_definition_directory="${1}"

    if ! [[ -d "${task_definition_directory}" ]]; then
        mycmd.debug "'${task_definition_directory}' does not exist."
        return 1
    fi

    if ! [[ "$(basename "${task_definition_directory}")" == "myproject" ]]; then
        mycmd.debug "'${task_definition_directory}' is not named 'myproject'."
        return 1
    fi

    if ! [[ -f "${task_definition_directory}/main" ]]; then
        mycmd.debug "Required file 'main' missing from '${task_definition_directory}'."
        return 1
    fi

    return 0
}

function project._find_up() {
    local -n project_root_directories="${1}"
    local starting_directory="${2}"

    if ! starting_directory="$(mycmd.canonicalize_path "${starting_directory}")"; then
        mycmd.debug "'${starting_directory}' not found."
        return 1
    fi

    mycmd.trace "Looking in '${starting_directory}' for MyProject Task Definition directory."

    if [[ -v _MYPROJECT_MAPPINGS[${starting_directory}] ]]; then
        local -r task_definition_directory="${_MYPROJECT_MAPPINGS["${starting_directory}"]}"

        mycmd.trace "Found MyProject Mapping for '${starting_directory}' as '${task_definition_directory}'."

        project_root_directories["${_PROJECT_ROOT_DIRECTORY}"]="${starting_directory}"
        # shellcheck disable=SC2034
        project_root_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]="${task_definition_directory}"
        return 0
    fi

    local -r possible_path="${starting_directory}/myproject"

    if project._is_valid_task_definition_directory "${possible_path}"; then
        project_root_directories["${_PROJECT_ROOT_DIRECTORY}"]="${starting_directory}"
        # shellcheck disable=SC2034
        project_root_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]="${possible_path}"
        return 0
    fi

    if [[ "${starting_directory}" = "/" ]]; then
        mycmd.debug "MyProject task definition directory not found."
        return 1
    fi

    project._find_up "${!project_root_directories}" "${starting_directory}/.."
}

# --------------------------------------------------------------------------------------------------
# Project Task Definition File Loading
function project.load_closest_task_definition() {
    local -a project_directories
    if ! project.find_up project_directories "${PWD}"; then
        mycmd.error_output "Not located in a MyProject Project."
        return 1
    fi

    local -r project_root_directory="${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    local -r task_definition_directory="${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"

    mycmd.output "Using project root at '${project_root_directory}'.\n"
    mycmd.output "Using task definition directory at '${task_definition_directory}'.\n"

    if ! project:task_registry.load_task_definition_file "${project_root_directory}" "${task_definition_directory}" main; then
        mycmd.error_output "Error loading project task definition files."
        return 1
    fi
}

function project.load_all_task_definition_files() {
    local -a project_directories
    if ! project.find_up project_directories "${PWD}"; then
        mycmd.error_output "Not located in a MyProject Project."
        return 1
    fi

    local -r project_root_directory="${project_directories["${_PROJECT_ROOT_DIRECTORY}"]}"
    local -r task_definition_directory="${project_directories["${_PROJECT_TASK_DEFINITION_DIRECTORY}"]}"

    if ! project:task_registry.load_all_task_definition_files "${project_root_directory}" "${task_definition_directory}"; then
        mycmd.error_output "Error loading project task definition files."
        return 1
    fi
}

# --------------------------------------------------------------------------------------------------
# Task Execution
function project.execute_task() {
    local fully_qualified_task_name="${1}"
    shift

    local return_code=0

    # shellcheck disable=SC2034
    local -A task
    if ! project:task_registry.get_task "${fully_qualified_task_name}" task; then
        mycmd.debug "Task '${fully_qualified_task_name}' is not found"
        return_code=1
    fi

    if (($# > 0 && "${return_code}" != 0)); then
        fully_qualified_task_name="${fully_qualified_task_name}/${1}"
        shift

        if ! project:task_registry.get_task "${fully_qualified_task_name}" task; then
            mycmd.error_output "Task '${fully_qualified_task_name}' is not found"
        else
            return_code=0
        fi
    fi

    if (("${return_code}" != 0)); then
        mycmd.error_output "Task not found."
        return 1
    fi

    project:task.execute task "${@}" || return_code="${?}"

    return "${return_code}"
}

mycmd.trace "The MyProject command group library has been sourced."
