# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# MyCmd Project Command Group Library
#   Library for Project Task Runner Functionality

set -o nounset -o errexit -o errtrace -o pipefail

(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

mycmd:command_group.register_version "0.1"
mycmd:command_group.register_short_description "MyCmd Project Command Group Library"
mycmd:command_group.register_help_text "Library for Project Task Runner Functionality"

[[ -n "${_MYCMD_SOURCING_FOR_HELP:-}" ]] && return

[[ -n "${_MYCMD_PROJECT_LIB:-}" ]] && return
readonly _MYCMD_PROJECT_LIB=1

declare -Agx _MYPROJECT_MAPPINGS=()

readonly _PROJECT_ROOT_DIR=0
readonly _PROJECT_TASK_DEFINITION_ROOT_DIR=1

# --------------------------------------------------------------------------------------------------
# Project Locating Public Functions
function project.find_up() {
    project._load_mapping_configuration

    project._find_up "${@}"
}

# --------------------------------------------------------------------------------------------------
# Project Locating Private Helper Functions
function project._load_mapping_configuration() {
    _MYPROJECT_MAPPINGS=()

    if [[ -n "${MYPROJECT_MAPPING_CONFIG-}" ]]; then
        project._load_mapping_config_file "${MYPROJECT_MAPPING_CONFIG}"
    fi

    # Parse MYPROJECT_MAPPING last so it can override values from the configuration file
    if [[ -n "${MYPROJECT_MAPPING-}" ]]; then
        local -r project_root="${MYPROJECT_MAPPING%%:*}"
        local -r myproject_root="${MYPROJECT_MAPPING##*:}"
        mycmd.trace "Checking '${MYPROJECT_MAPPING}' with project root '${project_root}' and myproject root '${myproject_root}'."

        project._add_myproject_mapping_if_valid "${project_root}" "${myproject_root}"
    fi

    project._log_myproject_mappings
}

function project._add_myproject_mapping_if_valid() {
    local project_root="${1}"
    local myproject_root="${2}"

    mycmd.trace "Checking mapping with project root '${project_root}' and myproject root '${myproject_root}'."

    if ! project_root="$(project._resolve_directory "${project_root}")"; then
        mycmd.debug "Error canonicalizing project root, ignoring mapping."
        return
    fi
    readonly project_root

    if ! myproject_root="$(project._resolve_directory "${myproject_root}")"; then
        mycmd.debug "Error canonicalizing myproject root, ignoring mapping."
        return
    fi
    readonly myproject_root

    if ! project._is_valid_myproject_task_definition_directory "${myproject_root}"; then
        mycmd.debug "'${myproject_root}' is not a valid Task Definition Directory, ignoring mapping."
        return
    fi

    mycmd.trace "Configuring mapping for '${project_root}' as '${myproject_root}'."
    _MYPROJECT_MAPPINGS["${project_root}"]="${myproject_root}"
}

function project._load_mapping_config_file() {
    local -r mapping_config_file="${1}"

    if ! [[ -e "${mapping_config_file}" ]]; then
        mycmd.debug "MyProject Mapping Configuration file '${mapping_config_file}' does not exist."
        return
    fi

    local -a config_lines=()

    readarray -t config_lines <"${mapping_config_file}"

    mycmd.trace "Processing ${#config_lines[@]} lines from mapping config file '${mapping_config_file}'."

    local line
    local project_root
    local myproject_root

    for line in "${config_lines[@]}"; do
        mycmd.trace "Processing config file line:"
        mycmd.trace "${line}"

        project_root="${line%%=*}"
        myproject_root="${line##*=}"

        project._add_myproject_mapping_if_valid "${project_root}" "${myproject_root}"
    done
}

function project._resolve_directory() {
    local dir="${1}"
    dir=${dir/#\~/${HOME}}
    mycmd.canonicalize_path "${dir}"
}

function project._is_valid_myproject_task_definition_directory() {
    local -r task_definition_directory="${1}"

    if ! [[ -d "${task_definition_directory}" ]]; then
        mycmd.debug "'${task_definition_directory}' does not exist."
        return 1
    fi

    if ! [[ "$(basename "${task_definition_directory}")" == "myproject" ]]; then
        mycmd.debug "'${task_definition_directory}' is not named 'myproject'."
        return 1
    fi

    if ! [[ -e "${task_definition_directory}/main" ]]; then
        mycmd.debug "Required file 'main' missing from '${task_definition_directory}'."
        return 1
    fi

    return 0
}

function project._log_myproject_mappings() {
    # TODO: Use mycmd.print_table when it can use mycmd.trace
    mycmd.trace "MyProject Mapping is configured with ${#_MYPROJECT_MAPPINGS[@]} entries.\n"

    local project_root
    local myproject_root
    for project_root in "${!_MYPROJECT_MAPPINGS[@]}"; do
        myproject_root="${_MYPROJECT_MAPPINGS["${project_root}"]}"
        mycmd.trace "'${project_root}' is mapped to use the MyProject Task Definition directory '${myproject_root}'."
    done
}

function project._find_up() {
    local -n project_root_dirs="${1}"
    local starting_dir="${2}"

    if ! starting_dir="$(mycmd.canonicalize_path "${starting_dir}")"; then
        mycmd.debug "'${starting_dir}' not found."
        return 1
    fi

    mycmd.trace "Looking in '${starting_dir}' for MyProject Task Definition directory."

    if [[ -v _MYPROJECT_MAPPINGS[${starting_dir}] ]]; then
        local -r myproject_root_dir="${_MYPROJECT_MAPPINGS["${starting_dir}"]}"

        mycmd.trace "Found MyProject Mapping for '${starting_dir}' as '${myproject_root_dir}'."

        project_root_dirs["${_PROJECT_ROOT_DIR}"]="${starting_dir}"
        # shellcheck disable=SC2034
        project_root_dirs["${_PROJECT_TASK_DEFINITION_ROOT_DIR}"]="${myproject_root_dir}"
        return 0
    fi

    local -r possible_path="${starting_dir}/myproject"

    if project._is_valid_myproject_task_definition_directory "${possible_path}"; then
        project_root_dirs["${_PROJECT_ROOT_DIR}"]="${starting_dir}"
        # shellcheck disable=SC2034
        project_root_dirs["${_PROJECT_TASK_DEFINITION_ROOT_DIR}"]="${possible_path}"
        return 0
    fi

    if [[ "${starting_dir}" = "/" ]]; then
        mycmd.debug "MyProject task definition directory not found"
        return 1
    fi

    project._find_up "${!project_root_dirs}" "${starting_dir}/.."
}

mycmd.trace "The MyCmd Project command group library has been sourced."
